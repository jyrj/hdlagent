If you got this error: 
```
Traceback (most recent call last):
  File "/home/farzaneh/llm4pld/scripts/PyRTL/sign_extend_int_to_double.py", line 10, in <module>
    upper_bits = sign_bit.extend(32)
AttributeError: \'WireVector\' object has no attribute \'extend\'
```

The error message 'WireVector' object has no attribute 'extend' indicates that you're trying to use a method extend on a WireVector object in PyRTL, which does not exist. In PyRTL, WireVector objects do not have an extend method.

If your intention is to perform sign extension (i.e., extending a smaller bit-width WireVector to a larger bit-width while preserving the sign), you need to use a different approach in PyRTL. The typical way to achieve this is by concatenating the sign bit with the original wire vector the appropriate number of times.

Here's a general approach to perform sign extension:

Determine the number of bits you need to add.
Replicate the sign bit (the most significant bit of your original wire) that many times.
Concatenate this replicated sign bit with the original wire.
Here's an example of how to do it:
```
import pyrtl

# Assuming you have a wirevector 'input_wire' of length n and you want to sign-extend it to m bits
input_wire = pyrtl.Input(n, 'input_wire')
extended_length = m  # The desired length after sign extension

# Extract the sign bit
sign_bit = input_wire[-1]  # The most significant bit (sign bit)

# Replicate the sign bit
replicated_sign_bits = pyrtl.concat(*[sign_bit for _ in range(extended_length - n)])

# Concatenate the replicated sign bits with the original wire
extended_wire = pyrtl.concat(replicated_sign_bits, input_wire)

# Now 'extended_wire' is the sign-extended version of 'input_wire'
```
In this example, replace n with the current bit-width of your wire and m with the desired bit-width after sign extension. This method ensures that the sign is correctly extended for the new bit-width.
